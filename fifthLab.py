#Вычислить параметры кода d, m, k, p, l, S. Найти образующий многочлен,
#воспользовавшись таблицей неприводимых многочленов.   Проверить, имеются
#ли ошибки в исследуемой комбинации, при наличии ошибок – исправить их.
#Провести программный контроль выполнения  на примере случайных кодовых
#комбинаций

#G(X)=K(X)*X

#G(X) - комбинация кода
#K(X) - образующий многочлен
#Q(X) - результат деления
#R(X) - остаток

#(G(X)*X)/K(X)=Q(X)+R(X)/K(X)
#Если R(X)=0, то ошибок нет

#Даны параметры кода d и n
#d - кодовое расстояние
#n - соотношение между разрядами

#m=log2(n+1) - кол-во проверочных символов
#k=n-m - кол-во информационных символов

#Из таблицы неприводимых двоичных многочленов выбираем образующий многочлен,
#где m - степень многочлена, d - число единиц в комбинации

#Вычислим проверочные разряды и получим образующую матрицу
#путем умножения всех (m+1)комбинаций из 1 и 0 на образующий многочлен

# Комбинациями исходного кода являются строки образующей матрицы
#и всевозможные суммы по модулю 2 различных сочетаний строк образующей матрицы

#Для исправления ошибки:
#а) принятая комбинация делится на образующий многочлен;
#б) подсчитывается вес остатка

#S – допустимое число исправляемых ошибок

#Если W in S, где S – допустимое число исправляемых ошибок, то принятая
#комбинация складывается по модулю 2 с полученным остатком. Сумма даст
#исправленную комбинацию. Если W > S, то делим полученную в результате
#циклического сдвига комбинацию на образующий многочлен. Если в остатке
#W in S, то складываем делимое с остатком. Затем производим циклический
#сдвиг вправо комбинации, полученной в результате суммирования последнего
#делимого с остатком. Если после первого циклического сдвига и последующего
#деления остаток получается таким, что его вес W > S, то процедура
#повторяется до тех пор, пока W in S. Затем производится циклический
#сдвиг вправо на столько разрядов, на сколько была сдвинута принятая
#комбинация. В результате получаем исправленную комбинацию
